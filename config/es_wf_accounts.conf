# Translate Wells Fargo account summary CSV 
# # /usr/share/logstash/repos/gdrive/remote
# # /repos/gdrive/remote/2020_YTD/Wells_Fargo_Uploads/Income_Account$ 
#
## /usr/share/logstash/repos/gdrive/remote
input {
 file {
    path => "/usr/share/logstash/repos/gdrive/remote/2020_YTD/Wells_Fargo_Uploads/Income_Account/*.csv"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    mode => read 
    exit_after_read => true 
    type => "Income"
  }
  file {
    path => "/usr/share/logstash/repos/gdrive/remote/2020_YTD/Wells_Fargo_Uploads/Operating_Account/*.csv"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    mode => read 
    exit_after_read => true 
    type => "Operating"
  }
  file {
    path => "/usr/share/logstash/repos/gdrive/remote/2019/Wells_Fargo_Uploads/Income_Account/*.csv"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    mode => read 
    exit_after_read => true 
    type => "Income"
  }
  file {
    path => "/usr/share/logstash/repos/gdrive/remote/2019/Wells_Fargo_Uploads/Operating_Account/*.csv"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    mode => read 
    exit_after_read => true 
    type => "Operating"
  }
#  file {
#    path => "/usr/share/logstash/repos/gdrive/north800/2020_YTD/Calibration/*.csv"
#    start_position => "beginning"
#    sincedb_path => "/dev/null"
#    mode => read 
#    exit_after_read => true 
#    type => "reference"
#  }
#  file {
#    path => "/Users/artb/repos/north800llc/Checking3.csv"
#    start_position => "beginning"
#    sincedb_path => "/dev/null"
#    mode => read 
    #exit_after_read => true 
#    type => "Operating"
#  }
}

filter {
      csv {
        columns => [ "xdate", "amount", "c1", "c2", "description" ]
      }
}
filter {
      date {
        match => [ "xdate", "MM/dd/YY" ]
        #match => [ "xdate", "dd/MM/YY" ]
        target => "timestamp"
      }
}
filter {
   
   ruby { 
        code =>  "
        require 'digest/md5'

        msg = event.get('message')
	checksum = Digest::MD5.hexdigest(msg)
	event.set('doc_id', checksum )
	p event.get('doc_id')
	typ = event.get('type')
	amount = event.get('amount').to_f
	#delta = amount
        p 'TYPE: ' + typ
        if typ == 'reference'
	   xtype = 'calibrate'
	   event.set('reference', amount)
           amount = 0.0
           

        elsif amount >= 0.0
	   xtype = 'deposit'
	   event.set('deposit', amount)
        else
	   xtype = 'withdrawl'
	   event.set('withdrawl', amount.abs)
	end
	event.set('xtype', xtype)
	event.set('amount', amount)
	#event.set('delta', amount)

        "
   } 
}

filter {
      mutate {
        remove_field => [  "@version", "xdate", "path" , "message", "c1", "c2", "host" ]
        rename => { "type" => "acct_id" }
      }

}

output {
 elasticsearch {
     #hosts => ["localhost:9200"]
     hosts => ["https://vpc-n8-elasticsearch-3wr5742lihatxtsndxy6kmb6ci.us-east-1.es.amazonaws.com:443"]
     index => "es_n800-wf_xns-%{+YYYY-MM-dd}"
     document_id => "%{doc_id}"
     ilm_enabled => false
  }

#  t1
#     hosts => ["localhost:9200"] 
#     index => "n800-wf_xns-%{+YYYY-MM-dd}"
#     document_id => "%{doc_id}"
#  }
  stdout{}
  

 }
